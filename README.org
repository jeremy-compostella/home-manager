*home-manager* is a little project I originally created to charge my EV (Electric Vehicle) only with the energy I produced with my solar panels. It is written in python since most of the libraries I need to use are in python. I have no intention to thoroughly document this project but I want to share it for inspiration purposes. This project is evolving into something wider than adaptive charging my car as I am adding dysfunctional detection of different devices in my home.

Adaptive Charging is the first use-case I hit that I could not resolve with a simple device schedule because the solar panels production is intermittent and unstable (even in Phoenix, Arizona).  Also, my electricity consumption is also unpredictable. For instance, I could decide to bake something at the last minute which is going to use a significant amount of my solar panels production and I want the EV charging to adapt accordingly without any manual intervention. The benefit of adaptive charging is that it also allows me to maximize the use of my solar panels production.

In order to make decisions, I needed data. By data I mean accurate and instantaneous power production and consumption information. I went with the [[https://www.emporiaenergy.com/][Emporia Gen 2 Vue]] sensors that I installed in my electrical panel. Emporia does have an official API but it works pretty well with the [[https://pypi.org/project/pyemvue/][pyemvue]] python module.

To charge my EV, I installed a [[https://wallbox.com/en_us/pulsar-plus-40a?utm_source=paid&utm_medium=Google_ads&utm_campaign=product40a&gclid=CjwKCAjwuIWHBhBDEiwACXQYsWI22s6DLL3oQDEN3hM_MHOoMEmj3jA08yWwUDRiWwtYaZAQx4RpZhoCK_oQAvD_BwE][Wallbox Pulsar Plus]] EV level 2 charger. The main reason is that this EV charger is adjustable from 6A up to 40A. Wallbox does not offer an official API but it works pretty well with the [[https://pypi.org/project/wallbox/][wallbox]] python module.

My [[EV_adaptive_charging.py][EV_adaptive_charging]] service is running on a [[https://www.raspberrypi.org/][Raspberry Pi]]. Its implementation is rather simple: If my solar panels are producing, the EV is plugged in and the EV is not fully charged, it computes the amount of energy which can be use to charge the EV and adapt the charge accordingly. Because changing the charging rate or stopping the charge is a slow operation (up to one minute), I also introduced a consumption prediction for the most significant appliances such as the Water Heater, the A/C or the pool pump in order to anticipate their need and smooth the transition.

_The software architecture is simple_:
1. The libraries:
   - The [[./consumer.py][consumer]] module implements a generic *Consumer* class along with extended classes such as the my [[https://www.ecobee.com/][Ecobee]] thermostat or my Wallbox charger.
   - The [[sensor.py][sensor]] module implements all my sensors such as Emporia Vue2 or OpenWeather
   - The [[./producer.py][producer]] module implements a generic *Producer* class which I use to represent the Solar Panels.
2. The services
   - The [[EV_adaptive_charging.py][EV_adaptive_charging]] service briefly described above charge the EV depending on production and consumption data.
   - The [[sensor_logger.py][sensor_logger]] service logs all the sensors every minute and in a daily CSV file
   - The [[health_monitor.py][health_monitor]] service is the script where I implement dysfunctional appliance detection is my home. I recently ran into air handler issues and Pool filter issue which I could have clearly detected sooner with a simple script.
3. The tools:
   - the [[stat_sensor.py][stat_sensor]] script that I use to process the csv files created by the [[sensor_logger.py][sensor_logger]] service and send me a daily report.
4. [[./home.ini][home.ini]] the configuration file

Here is an example daily report generated by the [[stat_sensor.py][stat_sensor]] script. It interestingly shows that despite an usually bad day in term of solar energy production, I still managed to put 12.60 KWh in my EV without getting any of it from the grid.

*Daily report for Saturday July 3 2021*

- *Temperature*: Min 80.0 F, Max 106.3 F, Median 90.4 F
- *Imported*: 34.09 KWh, Exported: 3.82
- *Total consumption*: 72.26 KWh
- *Cost*: 2.38 USD
- *Solar Panels*: 41.99 KWh (58%) - Max 5.77 KWh
- *HVAC*: 41.52 KWh (57%) - Max 5.55 KWh
- *EV charger*: 12.60 KWh (17%) - Max 5.35 KWh
- *Pool Pump*: 8.83 KWh (12%) - Max 1.91 KWh
- *Water Heater*: 2.49 KWh (3%) - Max 4.51 KWh
- *Kitchen Range*: 0.07 KWh (0%) - Max 0.81 KWh

[[./sensor.20210703.png]]


