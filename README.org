*home-manager* is a little project I originally created to charge my EV (Electric Vehicle) only using the energy my solar panels produce. I live in Phoenix, Arizona where the electricity is mostly generated from fossil energy and I want to maximize the use of my solar production to minimize my environmental impact. I have no intention to thoroughly document or make it very generic but I want to share it for inspiration purposes. Now that EV charging is working fantastically well, This project is evolving into something wider as I am adding dysfunctional device detection and adaptive thermostat configuration based on weather condition and thermal properties of my home.

Adaptive Charging is the first use-case I hit that I could not resolve with a simple schedule because the solar panels production is intermittent and unstable (even in Phoenix, Arizona).  Also, my electricity consumption is obviously unpredictable asI could decide to bake something at the last minute and it is going to use a significant amount of my solar panels production. Hence, I want my EV charging to adapt accordingly without any manual intervention.

In order to make decisions, I needed data. By data I mean accurate and instantaneous power production and consumption information. I went with the [[https://www.emporiaenergy.com/][Emporia Gen 2 Vue]] sensors that I installed in my electrical panel. Emporia does not have an official API but it actually works pretty well with the [[https://pypi.org/project/pyemvue/][pyemvue]] python module.

To charge my EV, I installed a [[https://wallbox.com/en_us/pulsar-plus-40a?utm_source=paid&utm_medium=Google_ads&utm_campaign=product40a&gclid=CjwKCAjwuIWHBhBDEiwACXQYsWI22s6DLL3oQDEN3hM_MHOoMEmj3jA08yWwUDRiWwtYaZAQx4RpZhoCK_oQAvD_BwE][Wallbox Pulsar Plus]] EV level 2 charger. The main reason is that this EV charger is adjustable from 6A up to 40A. Wallbox does not offer any official API but it works pretty well with the [[https://pypi.org/project/wallbox/][wallbox]] python module.

My [[EV_adaptive_charging.py][EV_adaptive_charging]] service is running on a [[https://www.raspberrypi.org/][Raspberry Pi]]. Its implementation is rather simple: If my solar panels are producing, the EV is plugged in and the EV is not fully charged, it computes the amount of energy which can be use to charge the EV and adapt the charge accordingly. Because changing the charging rate or stopping the charge is a slow operation (up to one minute), I also introduced a consumption prediction for the most significant appliances such as the Water Heater, the A/C or the pool pump in order to anticipate their need and smooth the transition.

_The software architecture is simple_:
1. The libraries:
   - The [[./consumer.py][consumer]] module implements a generic *Consumer* class along with extended classes such as the my [[https://www.ecobee.com/][Ecobee]] thermostat or my Wallbox charger.
   - The [[sensor.py][sensor]] module implements all my sensors such as Emporia Vue2 or OpenWeather
   - The [[./producer.py][producer]] module implements a generic *Producer* class which I use to represent the Solar Panels.
2. The services
   - The [[EV_adaptive_charging.py][EV_adaptive_charging]] service briefly described above charge the EV depending on production and consumption data (see below for more details).
   - The [[sensor_logger.py][sensor_logger]] service logs all the sensors every minute and in a daily CSV file
   - The [[health_monitor.py][health_monitor]] service is the script where I implement dysfunctional appliance detection is my home. I recently ran into air handler issues and Pool filter issue which I could have clearly detected sooner with a simple script.
   - The  [[HVAC_adaptive.py][HVAC_adaptive]] service adjusts one of my thermostat program to free as much power bandwidth as possible. This service postpones this particular thermostat program if it estimates that it will take less time to reach the target temperature. The estimation is based on a database built out of the thermal property of my home derived from the ~sensor.csv~ files constructed by the  [[sensor_logger.py][sensor_logger]]  service.
3. The tools:
   - the [[stat_sensor.py][stat_sensor]] script that I use to process the csv files created by the [[sensor_logger.py][sensor_logger]] service and send me a daily report.
4. [[./home.ini][home.ini]] the configuration file

* Services
**  [[EV_adaptive_charging.py][EV_adaptive_charging]]

This service charges an EV depending on production and consumption data. By default, it charges the EV only with over-produced electricity. However, it supports an [[EV_adaptive_charging.ini][EV_adaptive_charging.ini]] configuration file. Three parameters under the ~settings~ section can be defined. These parameters only applies during off-peak hours. They allow to fine tune the charging policy.

- ~coefficient~: by default it is equal to 1 which mean that *EV_adaptive_charging* will initiate EV charging only if 100% of the minimal charge rate is available. For instance, my EV Charger minimal current is 6A which translate to 1.44 KW. If ~coefficient~ is 1 and I do not over-produce more than 1.44 KW then EV_adaptive_charging will not start charging. However, if ~coefficient~ is set to 0.5, *EV_adaptive_charging* starts charging as soon as 1.44 * 0.5 = 0.72 KW is being overproduced.

  This variable is interesting to minimize the waste of produced energy for instance.

- ~minimal_charge~: by default it is equal to 0. It defines the minimal charge rate of the EV regardless of the current electricity consumption/production.  It can be use to overcome situation where the weather is really poor for consecutive days and that it is preferable to charge from the grid than to not charge at all.

- ~maximize~: by default it is equal to ~False~. If this setting is set to True  the EV charger maximizes the available power usage. For example: with an available power of 1.56 KW the EV charger charges at 6A which mean 1.44KW. However, If ~maximize~ is True, it charges at 7A (1.68 KW) because 1.56 KW is closer to 1.68 KW than to 1.44 KW.

**  [[stat_sensor.py][stat_sensor]]

I call this script from ~crontab~ to generate and send myself daily and monthly reports:

#+begin_src python
  # Daily report
  59 23 * * * sleep 10 && /bin/python3 /home/pi/stat_sensor.py --send-email

  # Monthly report
  10 0 1 * * /bin/python3 /home/pi/stat_sensor.py --files sensor.csv.$(date +%Y%m --date='15 minutes ago') --send-email
#+end_src

Here is an example daily report generated by the [[stat_sensor.py][stat_sensor]] script. It interestingly shows that despite an usually bad day in term of solar energy production (cloudy day), the system still managed to put 12.60 KWh in charging EV without getting any of it from the grid.

*Daily report for Saturday July 3 2021*

*Temperature*: Min 80.0°F, Max 106.3°F, Median 90.4°F

_Summary_:
- *Total consumption*: 72.26 KWh - 38.17 KWh (52%) from local production
- *Imported*: 34.09 KWh (47%), Exported: 3.82 KWh
- *Cost*: 2.38 USD (3.61 USD saved compared to EZ-3)

_Producer(s)_:
- *Solar Panels*: 41.99 KWh (58%) - Max 5.77 KW - 13h05min

Consumer(s):
- *HVAC*: 41.52 KWh (57%) - Max 5.55 KW - 10h44min
- *EV charger*: 12.60 KWh (17%) - Max 5.35 KW - 4h12min
- *Pool Pump*: 8.83 KWh (12%) - Max 1.91 KW - 5h02min
- *Water Heater*: 2.49 KWh (3%) - Max 4.51 KW - 34min
- *Kitchen Range*: 0.07 KWh (0%) - Max 0.81 KW - 7min

[[./sensor.20210703.png]]
